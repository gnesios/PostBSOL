//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 
namespace ProxyBsolContabiliza {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="contabilizaSoap", Namespace="http://BancoSol.WebServices.interfaces/")]
    public partial class contabiliza : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ExecuteOperationCompleted;
        
        /// <remarks/>
        public contabiliza() {
            this.Url = "http://applpre03srv/wsinterfacesbsol/contabiliza.asmx";
        }
        
        /// <remarks/>
        public event ExecuteCompletedEventHandler ExecuteCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BancoSol.WebServices.interfaces/Execute", RequestNamespace="http://BancoSol.WebServices.interfaces/", ResponseNamespace="http://BancoSol.WebServices.interfaces/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Execute(short canal, string usuario, string clave, string idAsiento, string xmlEntrada, ref string estado, ref string mensaje, ref string xmlSalida) {
            object[] results = this.Invoke("Execute", new object[] {
                        canal,
                        usuario,
                        clave,
                        idAsiento,
                        xmlEntrada,
                        estado,
                        mensaje,
                        xmlSalida});
            estado = ((string)(results[0]));
            mensaje = ((string)(results[1]));
            xmlSalida = ((string)(results[2]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginExecute(short canal, string usuario, string clave, string idAsiento, string xmlEntrada, string estado, string mensaje, string xmlSalida, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("Execute", new object[] {
                        canal,
                        usuario,
                        clave,
                        idAsiento,
                        xmlEntrada,
                        estado,
                        mensaje,
                        xmlSalida}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndExecute(System.IAsyncResult asyncResult, out string estado, out string mensaje, out string xmlSalida) {
            object[] results = this.EndInvoke(asyncResult);
            estado = ((string)(results[0]));
            mensaje = ((string)(results[1]));
            xmlSalida = ((string)(results[2]));
        }
        
        /// <remarks/>
        public void ExecuteAsync(short canal, string usuario, string clave, string idAsiento, string xmlEntrada, string estado, string mensaje, string xmlSalida) {
            this.ExecuteAsync(canal, usuario, clave, idAsiento, xmlEntrada, estado, mensaje, xmlSalida, null);
        }
        
        /// <remarks/>
        public void ExecuteAsync(short canal, string usuario, string clave, string idAsiento, string xmlEntrada, string estado, string mensaje, string xmlSalida, object userState) {
            if ((this.ExecuteOperationCompleted == null)) {
                this.ExecuteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteOperationCompleted);
            }
            this.InvokeAsync("Execute", new object[] {
                        canal,
                        usuario,
                        clave,
                        idAsiento,
                        xmlEntrada,
                        estado,
                        mensaje,
                        xmlSalida}, this.ExecuteOperationCompleted, userState);
        }
        
        private void OnExecuteOperationCompleted(object arg) {
            if ((this.ExecuteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteCompleted(this, new ExecuteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ExecuteCompletedEventHandler(object sender, ExecuteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string estado {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string mensaje {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string xmlSalida {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}
